name: Build-Release GitHub

on:
  workflow_dispatch:

env:
    app_name: smarter

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Get dependencies
      run: go get -v -t -d ./...

    - name: Build
      run: go build -v

  windows:
    name: Windows
    needs: build
    runs-on: windows-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Get dependencies
      run: go get -v -t -d ./...

    - name: Get version
      id: vars
      shell: pwsh
      run: echo "::set-output name=version::$(Get-Content -Path VERSION)"

    - name: Build
      id: build
      shell: pwsh
      run: |
        go build -v -ldflags "-X main.Version=${{ steps.vars.outputs.version }}" -o "./${{ env.app_name }}-windows-${{ steps.vars.outputs.version }}.exe"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      with:
        tag_name: v${{ steps.vars.outputs.version }}
        release_name: Release v${{ steps.vars.outputs.version }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.app_name }}-windows-${{ steps.vars.outputs.version }}.exe
        asset_name: ${{ env.app_name }}-windows-${{ steps.vars.outputs.version }}.exe
        asset_content_type: application/octet-stream

  mac_linux:
    name: macOS/Linux
    needs: windows
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
        go: ['1.22']

    steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}

    - name: Check out code
      uses: actions/checkout@v4

    - name: Get dependencies
      run: go get -v -t -d ./...

    - name: Get version
      id: vars
      run: echo ::set-output name=version::$(cat VERSION)

    - name: Build
      id: build
      shell: bash
      run: |
        go build -v \
        -ldflags "-X main.Version=${{ steps.vars.outputs.version }}" \
        -o ./${{ env.app_name }}-${{ matrix.os }}-${{ steps.vars.outputs.version }}


    - name: Get Release URL
      id: get_upload_url
      shell: bash
      run: |
        response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/v$VERSION")
        upload_url=$(echo "$response" | jq -r .upload_url)
        if [ -z "$upload_url" ]; then
          echo "Failed to get upload URL"
          exit 1
        fi
        echo "UPLOAD_URL=$upload_url" >> $GITHUB_ENV
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        VERSION: ${{ steps.vars.outputs.version }}

    - name: Upload Release Assets
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
        UPLOAD_URL: ${{ env.UPLOAD_URL }}
      with:
        upload_url: ${{ env.UPLOAD_URL }}
        asset_path: ./${{ env.app_name }}-${{ matrix.os }}-${{ steps.vars.outputs.version }}
        asset_name: ${{ env.app_name }}-${{ matrix.os }}-${{ steps.vars.outputs.version }}
        asset_content_type: application/octet-stream
