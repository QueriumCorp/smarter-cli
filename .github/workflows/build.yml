name: Build-Release

on:
  workflow_dispatch:

env:
    app_name: smarter

jobs:

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        go: ['1.22']

    steps:

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}

    - name: Check out code into the Go module directory
      uses: actions/checkout@v4

    - name: Get version
      id: vars
      run: echo ::set-output name=version::$(cat VERSION)

    - name: Get dependencies
      run: go get -v -t -d ./...

    - name: Build
      id: build
      run: |
        go build -v \
        -ldflags "-X main.version=${{ steps.vars.outputs.version }}" \
        -o ./${{ env.app_name }}-${{ matrix.os }}-${{ steps.vars.outputs.version }}

    - name: Check if release exists
      id: check_release
      run: |
        RELEASE_ID=$(curl --silent \
          --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.vars.outputs.version }}" \
          | jq '.id')
        if [ "$RELEASE_ID" != "null" ]; then
          echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
        else
          echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
        fi

    - name: Create Release
      if: env.RELEASE_EXISTS == 'false'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.vars.outputs.version }}
        release_name: Release ${{ steps.vars.outputs.version }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./${{ env.app_name }}-${{ matrix.os }}-${{ steps.vars.outputs.version }}
        asset_name: ${{ env.app_name }}-${{ matrix.os }}-${{ steps.vars.outputs.version }}
        asset_content_type: application/octet-stream
